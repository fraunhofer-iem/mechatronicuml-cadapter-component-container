[comment encoding = UTF-8 /]
[**
 * This module contains all templates, that are used to generate the Configuration-files
 * for a given Container. Duplicated from org.muml.c.adapter.container.container due to necessary adaptions.
 */]
[module MainFile('http://www.muml.org/pim/connector/1.0.0', 'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0',
				'http://www.muml.org/psm/1.0.0',
				'http://www.muml.org/psm/muml_container/0.5.0')/]

[import org::muml::c::adapter::componenttype::queries::stringQueries]
[import org::muml::c::adapter::componenttype::queries::modelQueries/]
[import org::muml::c::adapter::componenttype::queries::ContainerQueries/]


[import org::muml::c::adapter::container::container::ContainerCommunication/]
[import org::muml::c::adapter::container::queries::containerStringQueries/]
[import org::muml::c::adapter::container::container::ContainerBuilder/]
[import org::muml::c::adapter::container::container::Container/]

[template public generateMainFile(ecuConfig: ECUConfiguration, path : String, useSubDir : Boolean)]
[comment Arduino sketches' main-files have to be called just as their parent directory - so don't call them main.ino! /]
[file (path+ecuConfig.structuredResourceInstance.name+'.ino', false, 'UTF-8')]
#include "[if (useSubDir)]lib/[/if]Debug.h"

[comment include the I2C lib if I2C is used by the containers on this ECU /]
[if (ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->exists(piConifg | piConifg.oclIsKindOf(PortInstanceConfiguration_I2C)))]
#include "container_lib/I2cCustomLib.h"
[/if]

[comment include the MQTT lib if MQTT is use by the containers on this ECU /]
[if (ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->exists(piConfig | piConfig.oclIsKindOf(PortInstanceConfiguration_MQTT)))]
#include "container_lib/MqttCustomLib.h"

static struct WiFiConfig* wifiConfig;
static struct MqttConfig* mqttConfig;
[/if]

[for (container : ComponentContainer | ecuConfig.componentContainers)]
#include "[container.getFileName(container, true, useSubDir)/]"
[/for]


[let cis : OrderedSet(ComponentInstance) = ecuConfig.componentContainers.componentInstanceConfigurations.componentInstance->asOrderedSet()]
//variable for component Instances
[for (ci : ComponentInstance | cis)]
	[if (ci.componentType.oclIsKindOf(AtomicComponent))]
[ci.componentType.getClassName()/]* atomic_c[i/];
	[/if]
[/for]

[for (ci : ComponentInstance | cis->filter(AtomicComponentInstance)->select(c:AtomicComponentInstance |  c.componentType=ComponentKind::SOFTWARE_COMPONENT)->asOrderedSet())]
[/for]
void setup(){
	[for (ci : ComponentInstance | cis)]
		[if (ci.componentType.oclIsKindOf(AtomicComponent))]
	atomic_c[i/]= [ci.componentType.getContainerComponentCreateMethodName()/]([ci.getIdentifierVariableName()/]);
		[/if]
	[/for]
	
	[comment SETUP the I2C lib if I2C is used by the containers on this ECU /]
	[if (ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->exists(piConifg | piConifg.oclIsKindOf(PortInstanceConfiguration_I2C)))]
		[let piConfig : PortInstanceConfiguration = ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->any(piConifg | piConifg.oclIsKindOf(PortInstanceConfiguration_I2C))]
			[let i2cAddress : Integer = piConfig.oclAsType(PortInstanceConfiguration_I2C).ownI2cAddress]
	I2cCommunication_setup([i2cAddress/]);
			[/let]
		[/let]
	[/if]

	[comment SETUP the MQTT lib if MQTT is used by the containers on this ECU /]
	[if (ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->exists(piConfig | piConfig.oclIsKindOf(PortInstanceConfiguration_MQTT)))]
		[let mqttPiConfig : PortInstanceConfiguration_MQTT = ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->any(piConfig | piConfig.oclIsKindOf(PortInstanceConfiguration_MQTT)).oclAsType(PortInstanceConfiguration_MQTT)]
	//collect the data required for the WiFi configuration
	wifiConfig = malloc(sizeof(struct WiFiConfig));
	wifiConfig->ssid = "[mqttPiConfig.WiFi_ssid.toString()/]";
	wifiConfig->pass = "[mqttPiConfig.WiFi_pass.toString()/]";
	wifiConfig->status = WL_IDLE_STATUS;

	//collect the data required for the MQTT configuration
	mqttConfig = malloc(sizeof(struct MqttConfig));
	mqttConfig->serverIPAddress = "[mqttPiConfig.MQTT_serverAddress.toString()/]";
	mqttConfig->serverPort = [mqttPiConfig.MQTT_serverPort/];
	mqttConfig->clientName = "[ecuConfig.name.toString() /]";

	MqttCommunication_setup(wifiConfig, mqttConfig);
		[/let]	
	[/if]

	#ifdef DEBUG
	Serial.begin(9600);
	Serial.println("Initialization done...start execution.\n");
	#endif
}

void loop(){
	[comment LOOP the MQTT library if any of the ECU's containers uses MQTT /]
	[if (ecuConfig.componentContainers.componentInstanceConfigurations.portInstanceConfigurations->exists(piConfig | piConfig.oclIsKindOf(PortInstanceConfiguration_MQTT)))]
	MqttCommunication_loop(mqttConfig);
	[/if]

	[for (ci : ComponentInstance | cis)]
		[if (ci.componentType.oclIsKindOf(AtomicComponent))]
	[ci.componentType.getProcessMethodName()/](atomic_c[i/]);
		[/if]
	[/for]
}	

[/let]


	[/file]
[/template]	



